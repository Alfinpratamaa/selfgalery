// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String          @id @default(uuid())
  userId          String?         @unique @default(cuid()) @map("user_id")
  name            String?
  email           String?         @unique
  password        String?
  isEmailVerified Boolean?        @default(false) @map("is_email_verified")
  emailVerified   DateTime?       @map("email_verified")
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  media           Media[]
  accounts        Account[]
  session         Session[]
  verifiyAccount  VerifyAccount[]

  @@map("users")
}

model VerifyAccount {
  id          String    @id @default(cuid())
  activatedAt DateTime? @map("activated_at")
  token       String    @unique
  expires     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model Media {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  type      String
  url       String
  isPrivate Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("media")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}
